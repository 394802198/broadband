<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- import the dataSource definition -->
	<import resource="datasource-config.xml" />

	<!-- scanning package -->
	<context:component-scan base-package="com.tm.broadband.service" />

	<!-- enable autowire -->
	<context:annotation-config />

	<!-- transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="broadbandDataSource" />
	</bean>

	<!-- enable transaction demarcation with annotations -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- define the SqlSessionFactory -->
	<bean id="broadbandSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="broadbandDataSource" />
		<property name="mapperLocations" value="classpath*:mappers/*.xml" />
		<property name="typeAliasesPackage" value="com.tm.broadband.model" />
	</bean>

	<!-- scanning mapper xml -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="broadbandSqlSessionFactory" />
		<property name="basePackage" value="com.tm.broadband.mapper" />
	</bean>

	<!-- <bean id="webServiceTemplate" class="org.springframework.ws.client.core.WebServiceTemplate"> 
		<property name="defaultUri" value="http://localhost:8080/broadband/services/holidayService/" 
		/> </bean> -->

	<!-- <bean id="simpleService" class="org.springframework.remoting.jaxws.JaxWsPortProxyFactoryBean"> 
		<property name="serviceInterface" value="com.mycompany.hr.definitions.HumanResource" 
		/> <property name="wsdlDocumentUrl" value="http://localhost:8080/broadband/services/holidayService/holiday.wsdl" 
		/> <property name="namespaceUri" value="http://mycompany.com/hr/schemas" 
		/> <property name="serviceName" value="HumanResourceService" /> <property 
		name="portName" value="HumanResourceSoap11" /> </bean> -->


	<!-- Spring Email ********************************************************************************** -->

	<!-- SET default mail properties -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="mail.cyberpark.co.nz" />
		<!-- <property name="host" value="smtp.gmail.com" /> -->
		<property name="protocol" value="smtp" />
		<property name="port" value="25" />
		<!-- <property name="port" value="465" /> -->
		<!-- need to change before publish 465-->
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">true</prop>
                <!-- <prop key="mail.smtp.starttls.enable">true</prop> -->
				<!-- <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop> -->
				<prop key="mail.smtp.socketFactory.fallback">false</prop>
				<prop key="mail.smtp.timeout">120000</prop>
				<prop key="mail.smtp.connectiontimeout">120000</prop>
				<!-- true for Gamil -->
				<prop key="mail.debug">true</prop>
			</props>
		</property>
	</bean>


	<!--Asyn send Eamil -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
	</bean>

	<!-- You can have some pre-configured messagess also which are ready to 
		send -->
	<bean id="preConfiguredMessage" class="org.springframework.mail.SimpleMailMessage">
		<property name="to" value="xxx@gmail.com"></property>
		<property name="from" value="xxx@sina.com"></property>
		<property name="subject" value="Test email from sina." />
	</bean>
	
	
	<!-- ///////////////////////////////////////////////////////////////////////// -->
	<!-- timer configuration -->
	
	<!-- BEGIN createNextInvoicePDF -->
	<!-- normal business Bean -->
	<bean name="customerCreateInvoicePDFEachMonth" class="com.tm.broadband.quartz.CustomerCreateInvoicePDFEachMonth" />
	<!-- assignment -->
	<bean id="customerCreateInvoicePDFEachMonthJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="customerCreateInvoicePDFEachMonth" />
		<property name="targetMethod" value="createNextInvoicePDF" />
	</bean>
	<!-- trigger -->
	<bean id="customerCreateInvoicePDFEachMonthTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="customerCreateInvoicePDFEachMonthJob" />
		<property name="cronExpression" value="0 30 12 * * ?"></property>
		<!-- every 30 seconds -->
		<!-- 0-59/30 * * * * ? -->
		<!-- every noon 12:30 -->
		<!-- 0 30 12 * * ? -->
	</bean>
	<!-- END createNextInvoicePDF -->
	
	<!-- BEGIN createNextTermPlanInvoicePDF -->
	<!-- normal business Bean -->
	<bean name="customerCreateTermPlanInvoicePDFEachMonth" class="com.tm.broadband.quartz.CustomerCreateTermPlanInvoicePDFEachMonth" />
	<!-- assignment -->
	<bean id="customerCreateTermPlanInvoicePDFEachMonthJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="customerCreateTermPlanInvoicePDFEachMonth" />
		<property name="targetMethod" value="createTermInvoicePDF" />
	</bean>
	<!-- trigger -->
	<bean id="customerCreateTermPlanInvoicePDFEachMonthTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="customerCreateTermPlanInvoicePDFEachMonthJob" />
		<property name="cronExpression" value="0-59/20 * * * * ?"></property>
		<!-- every 30 seconds -->
		<!-- 0-59/30 * * * * ? -->
		<!-- every month's 8th 3:00 a.m. -->
		<!-- 0 0 3 8 * ? -->
	</bean>
	<!-- END createNextTermPlanInvoicePDF -->
	
	<!-- plan -->
	<bean name="testScheduler"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="customerCreateInvoicePDFEachMonthTrigger" />
				<ref bean="customerCreateTermPlanInvoicePDFEachMonthTrigger" />
			</list>
		</property>
		<property name="schedulerContextAsMap">
			<map>
				<entry key="timeout" value="30" />
			</map>
		</property>
	</bean>

</beans>
